@model N.G.HRS.Areas.MaintenanceControl.Models.AdditionalUnsupportedEmployees
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "ترحيل الإضافي الغير معتمد ";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Active"] = "AddEmployee";
    ViewData["Open"] = "Open2";
    ViewData["OpenOperation"] = "OpenOperation2";
}
<div class="card">

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3>  ترحيل الإضافي الغير معتمد </h3>
                    </div>
                    <div class="card-body">
                        <form asp-action="Create" method="post">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="row mb-3 set">
                                <div class="form-group col-md-10">
                                    <label asp-for="EmployeeId" class="form-label"></label><span class="text-danger">*</span>
                                    <select asp-for="EmployeeId" id="Employee" tabindex="1" class="js-example-basic-single  form-select" asp-items="ViewBag.EmployeeId">
                                        <option value="" selected disabled></option>
                                    </select>
                                </div>
                                <div class="form-group col-md-2">
                                    <input type="submit" id="Submit"style="Width:100%" value="ترحيل" class="btn btn-primary" />
                                </div>

                               
                            
                            </div>
                            <div class="row mb-3">
                                <div class="form-group col-md-5 ">
                                    <label asp-for="FromDate" class="form-label"></label><span class="text-danger">*</span>
                                    <div class="input-group flatpickr flatpickr-date" id="flatpickr-date">
                                        <input asp-for="FromDate" id="FromDate" tabindex="5" class="form-control" placeholder="أدخل التاريخ"
                                               data-input />
                                        <span class="input-group-text input-group-addon" data-toggle>
                                            <i data-feather="calendar"></i>
                                        </span>
                                        <span asp-validation-for="FromDate" class="text-danger"></span>

                                    </div>
                                </div>

                                <div class="form-group col-md-5 ">
                                    <div id="ToDateGroup">
                                        <label asp-for="ToDate" class="form-label"></label><span class="text-danger">*</span>
                                        <div class="input-group flatpickr flatpickr-date" id="flatpickr-date">
                                            <input asp-for="ToDate" tabindex="6" id="ToDate" class="form-control" placeholder="أدخل التاريخ"
                                                   data-input />
                                            <span class="input-group-text input-group-addon" data-toggle>
                                                <i data-feather="calendar"></i>
                                            </span>
                                            <span asp-validation-for="ToDate" class="text-danger"></span>

                                        </div>
                                    </div>
                                </div>
                             
                            </div>
                            
                            <div class="row mb-3">
                                
                                <div class="form-group col-md-5">
                                    <label asp-for="AdditionalUnsupported" class="form-label"></label>
                                    <input asp-for="AdditionalUnsupported" class="form-control" />
                                    <span asp-validation-for="AdditionalUnsupported" class="text-danger"></span>
                                </div><div class="form-group col-md-5">
                                    <label asp-for="AdditionalSupported" class="form-label"></label>
                                    <input asp-for="AdditionalSupported"  class="form-control" />
                                    <span asp-validation-for="AdditionalSupported" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                
                                <div class="form-group col-md-10">
                                    <label asp-for="Note" class="form-label"></label>
                                    <input asp-for="Note" tabindex="12" class="form-control" />
                                    <span asp-validation-for="Note" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <input type="submit" tabindex="13" id="Submit" value="جديد" class="btn btn-primary" />
                                <a asp-action="Index" tabindex="14" class="btn btn-light">رجوع الى القائمة</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {

            const betweenToDate = document.getElementById('BetweenToDate');
            const substituteEmployee = document.getElementById('SubstituteEmployee');
            const substituteEmployeeGroup = document.getElementById('SubstituteEmployeeGroup');
          
            
            //===================================================================================
          

            //===================================================================================
            //===================================================================================
            $('#FromDate').on('change', function () {

                const fromDate = $('#FromDate').val();
                const toDate = $('#ToDate').val();
                if (toDate != "") {
                    if (fromDate > toDate || fromDate == toDate) {
                        Swal.fire({
                            icon: 'error',
                            title: `تاريخ البداية يجب أن يكون أصغر من تاريخ النهاية!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        fromDate.value = "";
                    }
                }

            });
            $('#ToDate').on('change', function () {
                $('#ToTime').val("");
                $('#Hours').val("");
                $('#Minutes').val("");
                $('#TotalHours').val("");
                const fromDate = $('#FromDate').val();
                const toDate = $('#ToDate').val();

                if (fromDate != "" || fromDate == toDate) {
                    if (fromDate > toDate) {
                        Swal.fire({
                            icon: 'error',
                            title: `تاريخ البداية يجب أن يكون أصغر من تاريخ النهاية!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        toDate.value = "";
                    }

                }
            });
            //===================================================
           


            //===================================================================================
            //===================================================================================
            



            //===================================================================================
            //===================================================================================
            $('#Submit').click(function () {
                const employee = $('#Employee').val();
                const fromDate = $('#FromDate').val();

                const toDate = $('#ToDate').val();
                
                if ($('#Assignment').value == 2) {
                    if (taskDestination == "") {
                        Swal.fire({
                            icon: 'error',
                            title: `يجب أدخال  جهة المهمة!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        event.preventDefault();
                    }
                }
                if (mission == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب أدخال المهمة!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                } if (minutes == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب احتساب عدد الدقائق!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }
                if (hours == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب احتساب عدد الساعات!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }
                if (cheackTime) {
                    Swal.fire({
                        icon: 'error',
                        title: `وقت البداية يجب أن يكون أصغر من وقت النهاية!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }
                if (toTime == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب أدخال وقت النهاية!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }
                if (fromTime == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب أدخال وقت البداية!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }

                if (betweenToDate.checked) {
                    if (toDate == "") {
                        Swal.fire({
                            icon: 'error',
                            title: `يجب إدخال تاريخ النهاية!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        event.preventDefault();
                    }
                    if (fromDate > ToDate) {
                        Swal.fire({
                            icon: 'error',
                            title: `تاريخ البداية يجب أن يكون أصغر من وقت النهاية!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        event.preventDefault();
                    }
                    if (fromDate == ToDate) {
                        Swal.fire({
                            icon: 'error',
                            title: `تاريخ البداية يجب ان لا يساوي تاريخ النهاية!!`,
                            iconColor: "#d33",
                            confirmButtonColor: "#d33",
                            confirmButtonText: "حسنا",
                        });
                        event.preventDefault();
                    }
                }

                if (fromDate == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب إدخال تاريخ البداية!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }
                if ($('#Assignment').value == 2) {

                    if (substituteEmployee.checked) {
                        if (substituteEmployeeId == "") {
                            Swal.fire({
                                icon: 'error',
                                title: `يجب أختيار الموظف!!`,
                                iconColor: "#d33",
                                confirmButtonColor: "#d33",
                                confirmButtonText: "حسنا",
                            });
                            event.preventDefault();
                        }
                    }
                }


                if (employee == "") {
                    Swal.fire({
                        icon: 'error',
                        title: `يجب أختيار الموظف!!`,
                        iconColor: "#d33",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "حسنا",
                    });
                    event.preventDefault();
                }




            });
            //===================================================================================
            //===================================================================================

            function isStartTimeAfterEndTime(startTime, endTime) {
                // Convert start and end times to 24-hour format for easier comparison
                const startTime24 = convertTo24HourFormat(startTime);
                const endTime24 = convertTo24HourFormat(endTime);

                // Compare times
                return startTime24 > endTime24;
            }
            //==============
            function calculateDaysDifference(startDate, endDate) {
                // Convert both dates to milliseconds
                const startMillis = new Date(startDate).getTime();
                const endMillis = new Date(endDate).getTime();

                // Calculate the difference in milliseconds
                const differenceMillis = Math.abs(endMillis - startMillis);

                // Convert milliseconds to days
                const daysDifference = Math.ceil(differenceMillis / (1000 * 60 * 60 * 24));

                return daysDifference;
            }
            //==============
            function calculateHoursBetween(startTime, endTime) {
                // Convert start and end times to 24-hour format for easier calculation
                const startTime24 = convertTo24HourFormat(startTime);
                const endTime24 = convertTo24HourFormat(endTime);

                // Calculate the difference in minutes
                let minutesDifference = endTime24 - startTime24;

                // If the difference is negative, add 24 hours to it
                if (minutesDifference < 0) {
                    minutesDifference += 24 * 60; // 24 hours in minutes
                }
                // Convert minutes to hours and minutes
                const hours = Math.floor(minutesDifference / 60);
                const minutes = minutesDifference;
                return { hours, minutes };
            }
            //==============

            function convertTo24HourFormat(time12h) {

                const [time, period] = time12h.split(' ');
                let [hours, minutes] = time.split(':');

                // Convert hours to integer
                hours = parseInt(hours);
                minutes = parseInt(minutes);

                // Adjust hours according to AM/PM
                if (period === 'PM' && hours < 12) {
                    hours += 12;
                } else if (period === 'AM' && hours === 12) {
                    hours = 0;
                }

                // Return time in minutes since midnight
                return hours * 60 + minutes;
            }
            //===================================================================================
            //===================================================================================

        });
    </script>
}
